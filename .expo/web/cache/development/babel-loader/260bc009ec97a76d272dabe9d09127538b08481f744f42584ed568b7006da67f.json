{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useRef, useState } from 'react';\nimport Slides from \"./index\";\nimport SlideItem from \"./SlideItem\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get('screen'),\n  width = _Dimensions$get.width,\n  height = _Dimensions$get.height;\nvar Slider = function Slider() {\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    index = _useState2[0],\n    setIndex = _useState2[1];\n  var scrollX = useRef(new Animated.Value(0)).current;\n  var handleOnScroll = function handleOnScroll(event) {\n    Animated.event([{\n      nativeEvent: {\n        contentOffset: {\n          x: scrollX\n        }\n      }\n    }], {\n      useNativeDriver: false\n    })(event);\n  };\n  var handleOnViewableItemsChanged = useRef(function (_ref) {\n    var viewableItems = _ref.viewableItems;\n    setIndex(viewableItems[0].index);\n  }).current;\n  var viewabilityConfig = useRef({\n    itemVisiblePercentThreshold: 50\n  }).current;\n  var modWidth = width - 40;\n  return _jsx(FlatList, {\n    data: Slides,\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return _jsx(SlideItem, {\n        item: item\n      });\n    },\n    horizontal: true,\n    pagingEnabled: true,\n    snapToAlignment: \"center\",\n    showsHorizontalScrollIndicator: false,\n    onScroll: handleOnScroll,\n    onViewableItemsChanged: handleOnViewableItemsChanged,\n    viewabilityConfig: viewabilityConfig,\n    style: {}\n  });\n};\nexport default Slider;\nvar styles = StyleSheet.create({});","map":{"version":3,"names":["React","useRef","useState","Slides","SlideItem","jsx","_jsx","_Dimensions$get","Dimensions","get","width","height","Slider","_useState","_useState2","_slicedToArray","index","setIndex","scrollX","Animated","Value","current","handleOnScroll","event","nativeEvent","contentOffset","x","useNativeDriver","handleOnViewableItemsChanged","_ref","viewableItems","viewabilityConfig","itemVisiblePercentThreshold","modWidth","FlatList","data","renderItem","_ref2","item","horizontal","pagingEnabled","snapToAlignment","showsHorizontalScrollIndicator","onScroll","onViewableItemsChanged","style","styles","StyleSheet","create"],"sources":["C:/Users/rohan/Documents/React Native Projects/test/Rentify/component/Slider.js"],"sourcesContent":["import {Animated, Dimensions, FlatList, StyleSheet, Text, View} from 'react-native';\r\nimport React, {useRef, useState} from 'react';\r\nimport Slides from './index';\r\nimport SlideItem from './SlideItem';\r\n\r\nconst {width, height} = Dimensions.get('screen');\r\n\r\nconst Slider = () => {\r\n  const [index, setIndex] = useState(0);\r\n  const scrollX = useRef(new Animated.Value(0)).current;\r\n\r\n  const handleOnScroll = event => {\r\n    Animated.event(\r\n      [\r\n        {\r\n          nativeEvent: {\r\n            contentOffset: {\r\n              x: scrollX,\r\n            },\r\n          },\r\n        },\r\n      ],\r\n      {\r\n        useNativeDriver: false,\r\n      },\r\n    )(event);\r\n  };\r\n\r\n  const handleOnViewableItemsChanged = useRef(({viewableItems}) => {\r\n    // console.log('viewableItems', viewableItems);\r\n    setIndex(viewableItems[0].index);\r\n  }).current;\r\n\r\n  const viewabilityConfig = useRef({\r\n    itemVisiblePercentThreshold: 50,\r\n  }).current;\r\n\r\n  const modWidth = width - 40;\r\n\r\n  return (\r\n      <FlatList\r\n        data={Slides}\r\n        renderItem={({item}) => <SlideItem item={item} />}\r\n        horizontal\r\n        pagingEnabled\r\n        snapToAlignment=\"center\"\r\n        showsHorizontalScrollIndicator={false}\r\n        onScroll={handleOnScroll}\r\n        onViewableItemsChanged={handleOnViewableItemsChanged}\r\n        viewabilityConfig={viewabilityConfig}\r\n        style={{}}\r\n      />\r\n  );\r\n};\r\n\r\nexport default Slider;\r\n\r\nconst styles = StyleSheet.create({});\r\n"],"mappings":";;;;;;;AACA,OAAOA,KAAK,IAAGC,MAAM,EAAEC,QAAQ,QAAO,OAAO;AAC7C,OAAOC,MAAM;AACb,OAAOC,SAAS;AAAoB,SAAAC,GAAA,IAAAC,IAAA;AAEpC,IAAAC,eAAA,GAAwBC,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC;EAAzCC,KAAK,GAAAH,eAAA,CAALG,KAAK;EAAEC,MAAM,GAAAJ,eAAA,CAANI,MAAM;AAEpB,IAAMC,MAAM,GAAG,SAATA,MAAMA,CAAA,EAAS;EACnB,IAAAC,SAAA,GAA0BX,QAAQ,CAAC,CAAC,CAAC;IAAAY,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA9BG,KAAK,GAAAF,UAAA;IAAEG,QAAQ,GAAAH,UAAA;EACtB,IAAMI,OAAO,GAAGjB,MAAM,CAAC,IAAIkB,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,OAAO;EAErD,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAGC,KAAK,EAAI;IAC9BJ,QAAQ,CAACI,KAAK,CACZ,CACE;MACEC,WAAW,EAAE;QACXC,aAAa,EAAE;UACbC,CAAC,EAAER;QACL;MACF;IACF,CAAC,CACF,EACD;MACES,eAAe,EAAE;IACnB,CACF,CAAC,CAACJ,KAAK,CAAC;EACV,CAAC;EAED,IAAMK,4BAA4B,GAAG3B,MAAM,CAAC,UAAA4B,IAAA,EAAqB;IAAA,IAAnBC,aAAa,GAAAD,IAAA,CAAbC,aAAa;IAEzDb,QAAQ,CAACa,aAAa,CAAC,CAAC,CAAC,CAACd,KAAK,CAAC;EAClC,CAAC,CAAC,CAACK,OAAO;EAEV,IAAMU,iBAAiB,GAAG9B,MAAM,CAAC;IAC/B+B,2BAA2B,EAAE;EAC/B,CAAC,CAAC,CAACX,OAAO;EAEV,IAAMY,QAAQ,GAAGvB,KAAK,GAAG,EAAE;EAE3B,OACIJ,IAAA,CAAC4B,QAAQ;IACPC,IAAI,EAAEhC,MAAO;IACbiC,UAAU,EAAE,SAAAA,WAAAC,KAAA;MAAA,IAAEC,IAAI,GAAAD,KAAA,CAAJC,IAAI;MAAA,OAAMhC,IAAA,CAACF,SAAS;QAACkC,IAAI,EAAEA;MAAK,CAAE,CAAC;IAAA,CAAC;IAClDC,UAAU;IACVC,aAAa;IACbC,eAAe,EAAC,QAAQ;IACxBC,8BAA8B,EAAE,KAAM;IACtCC,QAAQ,EAAErB,cAAe;IACzBsB,sBAAsB,EAAEhB,4BAA6B;IACrDG,iBAAiB,EAAEA,iBAAkB;IACrCc,KAAK,EAAE,CAAC;EAAE,CACX,CAAC;AAER,CAAC;AAED,eAAejC,MAAM;AAErB,IAAMkC,MAAM,GAAGC,UAAU,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}